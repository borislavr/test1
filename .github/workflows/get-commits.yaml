name: Add Commit Comments to PR Description

on:
  pull_request:
    types: [opened, synchronize]
permissions:
  pull-requests: write
jobs:
  add-comments-to-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Get commit comments and update PR description
        shell: python
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          import os
          import requests

          # GitHub API URL
          repo = os.getenv('GITHUB_REPOSITORY')
          print(repo)
          pr_number = os.getenv('GITHUB_REF').split('/')[-2]
          print(pr_number)
          api_url = f"https://api.github.com/repos/{repo}/pulls/{pr_number}"
          print(api_url)

          # Get PR details
          headers = {
              "Authorization": f"Bearer {os.getenv('GITHUB_TOKEN')}",
              "Accept": "application/vnd.github.v3+json"
          }
          print(headers)
          pr_response = requests.get(api_url, headers=headers)
          pr_data = pr_response.json()
          print(pr_data)
          print(pr_data['body'])

          # Get commits in the PR
          commits_url = pr_data['commits_url']
          print(commits_url)
          commits_response = requests.get(commits_url, headers=headers)
          commits_data = commits_response.json()
          print(commits_data)

          # Collect messages from all commits
          messages = []
          for commit in commits_data:
              messages.append(f"[{commit['author']['login']}]({commit['html_url']}) {commit['commit']['message']}")

          # Update PR description with messages
          if messages:
              new_description = pr_data['body'] + "\n\n### Commit messages:\n" + "\n".join(messages)
              update_pr_url = f"https://api.github.com/repos/{repo}/pulls/{pr_number}"
              update_data = {
                  "body": new_description
              }
              update_response = requests.patch(update_pr_url, json=update_data, headers=headers)
              print("PR description updated with commit comments.")
          else:
              print("No commit comments found.")
